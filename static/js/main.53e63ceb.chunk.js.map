{"version":3,"sources":["actions/actions.js","reducers/matrices.js","reducers/index.js","epics/index.js","components/common/ModalWrapper.js","actions/matrices.js","components/common/InputGrid.js","components/createMatrix/CreateMatrix.js","components/common/Matrix.js","components/common/ResponsiveIcon.js","components/matricesBank/RichMatrix.js","components/matricesBank/MatricesBank.js","actions/operations.js","components/controlPanel/operations/Multiply.js","components/controlPanel/operations/Invert.js","components/controlPanel/ControlPanel.js","components/MatrixGUI.js","App.js","index.js"],"names":["UPSERT_MATRIX","RENAME_MATRIX","DELETE_MATRIX","MULTIPLY","INVERT","initialState","OrderedMap","fibonacci_q","tf","first_fibonacci","matrices","state","arguments","length","undefined","action","type","contains","name","updateIn","numericValues","shape","set","mapKeys","k","newName","remove","_ref","get","m1","m2","matrix_1","matrix_2","resultVariable","matrix","combineReducers","generatedCode","rootEpic","combineEpics","ModalWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","modalState","toggleModal","bind","assertThisInitialized","setState","prev","react_default","a","createElement","React","cloneElement","children","onClick","ModalWrapper_Modal","closeModal","title","toggle","Component","Modal","className","upsertMatrix","renameMatrix","deleteMatrix","InputGrid","finishedPopulating","create","numRows","initialRows","numCols","initialCols","matrixName","edit","clone","today","Date","timestamp","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","addRow","addCol","removeRow","removeCol","submit","updateMatrixName","getStartingValue","setFinishedPopulating","prevState","Math","min","max","objectSpread","r","c","push","parseFloat","concat","value","i","j","toFixed","status","_this2","ret","placeholder","onChange","e","target","style","paddingTop","toConsumableArray","Array","keys","map","key","size","fontSize","defaultValue","ref","input","connect","dispatch","bindActionCreators","CreateMatrix","common_ModalWrapper","common_InputGrid","Matrix","count","fragments","List","val","_props$shape","slicedToArray","rows","cols","slice","join","math","katex","renderToString","convertStateToLatex","Parser","ResponsiveIcon","hover","hoverOn","hoverOff","icon","cursor","onMouseEnter","onMouseLeave","RichMatrix","_this$props","other","objectWithoutProperties","common_Matrix","common_ResponsiveIcon","assign","MatricesBank","createMatrix_CreateMatrix","entrySeq","_ref2","v","matricesBank_RichMatrix","buffer","values","multiply","actions","invert","Multiply","onChange_1","selected","onChange_2","updateResultVariable","onChange1","onChange2","full","Side","align","Item","keySeq","Invert","matrixSelected","ControlPanel","color","Divider","operations_Multiply","operations_Invert","MatrixGUI","matricesBank_MatricesBank","controlPanel_ControlPanel","App","components_MatrixGUI","logger","createLogger","stateTransformer","newState","_arr","_i","Immutable","Iterable","isIterable","toJS","epicMiddleware","createEpicMiddleware","store","createStore","rootReducer","applyMiddleware","run","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.53e63ceb.chunk.js","sourcesContent":["/* Contains definitons of actions */\n\nexport const UPSERT_MATRIX = \"UPSERT_MATRIX\"\nexport const RENAME_MATRIX = \"RENAME_MATRIX\"\nexport const DELETE_MATRIX = \"DELETE_MATRIX\"\n\nexport const APPEND_LINE = \"APPEND_LINE\"\n\nexport const MULTIPLY = \"MULTIPLY\"\nexport const INVERT = \"INVERT\"","import * as tf from '@tensorflow/tfjs';\n\nimport { UPSERT_MATRIX, RENAME_MATRIX, DELETE_MATRIX, MULTIPLY, INVERT } from \"../actions/actions\";\nimport { OrderedMap } from \"immutable\"\n\nconst initialState = new OrderedMap({\n  \"fibonacci_q\": tf.tensor([1, 1, 1, 0], [2, 2]),\n  \"first_fibonacci\": tf.tensor([1, 1], [2, 1])\n})\n\nconst matrices = (state = initialState, action) => {\n  switch (action.type) {\n    case UPSERT_MATRIX:\n      if (state.contains(action.name)) {\n        return state.updateIn([action.name], () => tf.tensor(action.numericValues, action.shape))\n      }\n      return state.set(action.name, tf.tensor(action.numericValues, action.shape))\n    case RENAME_MATRIX:\n      return state.mapKeys(k => {\n        if (k === action.name) {\n          return action.newName\n        }\n        return k\n      })\n    case DELETE_MATRIX:\n      return state.remove(action.name)\n    case MULTIPLY:\n      let [matrix_1, matrix_2] = [state.get(action.m1), state.get(action.m2)]\n      return state.set(action.resultVariable, tf.mul(matrix_1, matrix_2))\n    case INVERT:\n      let matrix = state.get(action.m1)\n      return state.set(action.resultVariable, matrix)\n    default:\n      return state\n  }\n}\n\nexport default matrices","\nimport { combineReducers } from 'redux'\nimport matrices from './matrices'\nimport generatedCode from './generatedCode'\n\nexport default combineReducers({\n    matrices,\n    generatedCode\n})\n","import { combineEpics } from 'redux-observable';\n\nexport const rootEpic = combineEpics(\n    // multiplyEpic,\n);","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass ModalWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalState: false\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  toggleModal() {\n    this.setState((prev, props) => {\n      const newState = !prev.modalState;\n\n      return { modalState: newState };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {React.cloneElement(this.props.children[0], { onClick: this.toggleModal })}\n        </div>\n\n        <Modal\n          closeModal={this.toggleModal}\n          modalState={this.state.modalState}\n          title={this.props.children[1]}\n        >\n          {React.cloneElement(this.props.children[2], { toggle: this.toggleModal })}\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst Modal = ({ children, closeModal, modalState, title }) => {\n  if (!modalState) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" onClick={closeModal} />\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">{title}</p>\n          <button className=\"delete\" onClick={closeModal} />\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"content\">\n            {children}\n          </div>\n        </section>\n        <footer className=\"modal-card-foot\">\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  modalState: PropTypes.bool.isRequired,\n  title: PropTypes.string\n}\n\nexport default ModalWrapper;","import { UPSERT_MATRIX, RENAME_MATRIX, DELETE_MATRIX } from \"actions/actions\";\n\n\nexport function upsertMatrix(name, shape, numericValues) {\n    return {\n        type: UPSERT_MATRIX,\n        name,\n        shape,\n        numericValues\n    }\n}\n\nexport function renameMatrix(name, newName) {\n    return {\n        type: RENAME_MATRIX,\n        name,\n        newName\n    }\n}\n\nexport function deleteMatrix(name) {\n    return {\n        type: DELETE_MATRIX,\n        name\n    }\n}\n","import React from 'react';\nimport { bindActionCreators } from 'redux'\nimport { connect } from \"react-redux\"\n\nimport { upsertMatrix } from \"actions/matrices\"\nimport { renameMatrix } from \"actions/matrices\"\n\nclass InputGrid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.finishedPopulating = false\n        if (props.create) {\n            this.state = {\n                numRows: props.initialRows,\n                numCols: props.initialCols,\n                matrixName: ''\n            }\n        }\n\n        else if (props.edit) {\n            this.state = {\n                numRows: props.shape[0],\n                numCols: props.shape[1],\n                numericValues: props.numericValues,\n                matrixName: props.matrixName\n            }\n        }\n\n        else if (props.clone) {\n            var today = new Date();\n            var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n            var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            var timestamp = date + ' ' + time\n            this.state = {\n                numRows: props.shape[0],\n                numCols: props.shape[1],\n                numericValues: props.numericValues,\n                matrixName: props.matrixName + ' __CLONED_AT__' + timestamp\n            }\n        }\n\n        this.addRow = this.addRow.bind(this)\n        this.addCol = this.addCol.bind(this)\n        this.removeRow = this.removeRow.bind(this)\n        this.removeCol = this.removeCol.bind(this)\n        this.submit = this.submit.bind(this)\n        this.updateMatrixName = this.updateMatrixName.bind(this)\n        this.getStartingValue = this.getStartingValue.bind(this)\n        this.setFinishedPopulating = this.setFinishedPopulating.bind(this)\n    }\n\n    addRow() {\n        this.setState((prevState) => ({\n            numRows: Math.min(prevState.numRows + 1, 7)\n        }))\n    }\n\n    addCol() {\n        this.setState((prevState) => ({\n            numCols: Math.min(prevState.numCols + 1, 7)\n        }))\n    }\n\n    removeRow() {\n        this.setState((prevState) => ({\n            numRows: Math.max(prevState.numRows - 1, 1)\n        }))\n    }\n\n    removeCol() {\n        this.setState((prevState) => ({\n            numCols: Math.max(prevState.numCols - 1, 1)\n        }))\n    }\n\n    updateMatrixName(newName) {\n        this.setState(\n            { ...this.state, matrixName: newName }\n        )\n    }\n\n    submit() {\n        let numericValues = []\n        for (let r = 0; r < this.state.numRows; r++) {\n            for (let c = 0; c < this.state.numCols; c++) {\n                numericValues.push(parseFloat(this[`textInput${r},${c}`].value))\n            }\n        }\n        if (this.props.edit) {\n            this.props.upsertMatrix(this.props.matrixName, [this.state.numRows, this.state.numCols], numericValues)\n            this.props.renameMatrix(this.props.matrixName, this.state.matrixName)\n        } else {\n            this.props.upsertMatrix(this.state.matrixName, [this.state.numRows, this.state.numCols], numericValues)\n            this.props.toggle()\n        }\n    }\n\n    getStartingValue(i, j) {\n        if (this.state.numericValues &&\n            i * this.state.numCols + j < this.state.numericValues.length &&\n            !this.finishedPopulating) {\n            return parseFloat(this.state.numericValues[i * this.state.numCols + j].toFixed(5))\n        }\n        return 0\n    }\n\n    setFinishedPopulating(status) {\n        this.finishedPopulating = status\n    }\n\n    render() {\n        let ret = (\n            <div className=\"columns\">\n                <div className=\"column\">\n                    <input\n                        className=\"input\"\n                        type=\"text\"\n                        value={this.state.matrixName}\n                        placeholder=\"Matrix Name\"\n                        onChange={(e) => this.updateMatrixName(e.target.value)} />\n                    <div className=\"columns\" style={{ paddingTop: \"25px\" }}>\n                        <div className=\"column is-narrow\">\n                            {[...Array(this.state.numRows).keys()].map(i =>\n                                <div key={i}>\n                                    {[...Array(this.state.numCols).keys()].map(j =>\n                                        <input\n                                            type=\"text\"\n                                            size=\"4\"\n                                            style={{ fontSize: \"20px\" }}\n                                            defaultValue={this.getStartingValue(i, j)}\n                                            key={`${i},${j}`}\n                                            ref={input => { this[`textInput${i},${j}`] = input }} />\n                                    )}\n                                    <br />\n                                </div>)}\n                        </div>\n                        <div className=\"column is-one-fifth has-text-left\">\n                            <button className=\"button is-small\" onClick={this.removeRow}>Rem. Row</button>\n                            <br />\n                            <button className=\"button is-small\" onClick={this.addRow}>Add Row</button>\n                        </div>\n                    </div>\n\n                    <div className=\"columns\" >\n                        <div className=\"column is-narrow has-text-left\">\n                            <span className=\"button is-small\" onClick={this.removeCol}>Rem. Col</span>\n                            <span className=\"button is-small\" onClick={this.addCol}>Add Col</span>\n                            <div style={{ paddingTop: \"20px\" }}>\n                                <button className=\"button\" onClick={this.submit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n        this.setFinishedPopulating(true)\n        return ret\n    }\n}\n\n\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        upsertMatrix,\n        renameMatrix\n    },\n        dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(InputGrid);\n\n","import React from 'react';\nimport ModalWrapper from 'components/common/ModalWrapper'\nimport InputGrid from 'components/common/InputGrid'\n\nclass CreateMatrix extends React.Component {\n  render() {\n    return (\n      <ModalWrapper>\n        <button className=\"button is-primary\">\n          Create New Matrix\n        </button>\n        Create New Matrix\n        <InputGrid initialRows={2} initialCols={2} create />\n      </ModalWrapper>\n    )\n  }\n}\n\nexport default CreateMatrix;","import React from 'react';\nimport { List } from 'immutable';\nimport katex from 'katex';\nimport Parser from 'html-react-parser';\n\nconst START = \"\\\\begin{pmatrix}\"\nconst END = \"\\\\end{pmatrix}\"\n\nclass Matrix extends React.Component {\n    convertStateToLatex(props) {\n        let fragments = new List()\n        var numericValues = new List(props.numericValues).map(val => parseFloat(val.toFixed(5)))\n        var [rows, cols] = props.shape\n        var count\n        for (count = 0; count < rows; count++) {\n            fragments = fragments\n                .push(numericValues\n                    .slice(count * cols, (count + 1) * cols)\n                    .join(' & '))\n        }\n        return START + fragments.join(' \\\\\\\\ ') + END\n    }\n\n    render() {\n        let math = katex.renderToString(this.convertStateToLatex(this.props));\n        return (\n            <div>{Parser(math)}</div>\n        )\n    }\n}\n\nexport default Matrix;","import React from 'react';\n\nclass ResponsiveIcon extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false\n        }\n        this.hoverOn = this.hoverOn.bind(this)\n        this.hoverOff = this.hoverOff.bind(this)\n    }\n\n    hoverOn() {\n        this.setState({ hover: true });\n    }\n\n    hoverOff() {\n        this.setState({ hover: false });\n    }\n\n    render() {\n        return (\n            <i className={this.state.hover ? \"fas \" + this.props.icon : \"far \" + this.props.icon}\n                style={{ cursor: \"pointer\" }}\n                onMouseEnter={this.hoverOn}\n                onMouseLeave={this.hoverOff}\n                onClick={this.props.onClick}\n                title={this.props.title}\n            ></i>\n        )\n    }\n}\n\nexport default ResponsiveIcon;\n\n","import React from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\nimport { deleteMatrix } from \"actions/matrices\"\nimport Matrix from \"components/common/Matrix\"\nimport ModalWrapper from \"components/common/ModalWrapper\"\nimport InputGrid from \"components/common/InputGrid\"\nimport ResponsiveIcon from \"components/common/ResponsiveIcon\"\n\nclass RichMatrix extends React.Component {\n    render() {\n        var { matrixName, deleteMatrix, ...other } = this.props\n        return (\n            <div className=\"box has-text-centered\">\n                <Matrix {...other} />\n                {this.props.matrixName}\n                <br />\n                <span className=\"icon has-text-info\" >\n                    <ModalWrapper>\n                        <ResponsiveIcon icon=\"fa-edit\" title=\"Edit the matrix in place\" />\n                        {this.props.name}\n                        <InputGrid {...other} matrixName={matrixName} edit />\n                    </ModalWrapper>\n                </span>\n                <span className=\"icon has-text-info\" >\n                    <ModalWrapper>\n                        <ResponsiveIcon icon=\"fa-clone\" title=\"Create a duplicate of this matrix\" />\n                        {this.props.name}\n                        <InputGrid {...other} matrixName={matrixName} clone />\n                    </ModalWrapper>\n                </span>\n                <span className=\"icon has-text-info\" >\n                    <ResponsiveIcon icon=\"fa-trash-alt\" onClick={() => deleteMatrix(matrixName)} title=\"Delete this matrix\" />\n                </span>\n            </div>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        deleteMatrix\n    },\n        dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(RichMatrix);\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\n\nimport CreateMatrix from \"components/createMatrix/CreateMatrix\"\nimport RichMatrix from 'components/matricesBank/RichMatrix';\n\n\nclass MatricesBank extends Component {\n\n  render() {\n    return (\n      <div>\n        <nav className=\"level\">\n          <div className=\"level-left\">\n            <div className=\"level-item\">\n              <h2 className=\"subtitle is-3\">Matrices </h2>\n            </div>\n            <div className=\"level-item\">\n              <CreateMatrix />\n            </div>\n          </div>\n        </nav>\n        <div className=\"box\">\n          <div className=\"columns is-multiline\">\n            {this.props.matrices.entrySeq().map(([k, v]) =>\n              <div className=\"column is-narrow is-mobile\" key={k}>\n                <RichMatrix\n                  numericValues={v.buffer().values}\n                  shape={v.shape}\n                  matrixName={k}\n                  key={k}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    matrices: state.matrices\n  }\n}\n\nexport default connect(mapStateToProps)(MatricesBank);\n","import * as actions from \"actions/actions\"\n\nexport function multiply(m1, m2, resultVariable) {\n    return {\n        type: actions.MULTIPLY,\n        m1,\n        m2,\n        resultVariable\n    }\n}\n\nexport function invert(m1, resultVariable) {\n    return {\n        type: actions.INVERT,\n        m1,\n        resultVariable\n    }\n}\n\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\n\nimport { multiply } from \"actions/operations\"\nimport { Dropdown, Level, Button, Box } from \"react-bulma-components/full\"\n\nclass Multiply extends Component {\n  constructor(props) {\n    super(props)\n    this.onChange1 = this.onChange_1.bind(this)\n    this.onChange2 = this.onChange_2.bind(this)\n    this.updateResultVariable = this.updateResultVariable.bind(this)\n    this.multiply = this.multiply.bind(this)\n    this.state = { matrix_1: \"\", matrix_2: \"\", resultVariable: \"\" }\n  }\n\n  onChange_1 = selected => {\n    this.setState({ matrix_1: selected });\n  };\n\n  onChange_2 = selected => {\n    this.setState({ matrix_2: selected });\n  };\n\n  updateResultVariable = input => {\n    this.setState({ resultVariable: input.target.value })\n  }\n\n  multiply = () => {\n    this.props.multiply(this.state.matrix_1, this.state.matrix_2, this.state.resultVariable)\n  }\n\n  render() {\n    return (\n      <Box>\n        <Level>\n          <Level.Side align=\"left\">\n            <Level.Item>\n              <Dropdown value={this.state.matrix_1} onChange={this.onChange1}>\n                <Dropdown.Item value=\"\">Select Matrix</Dropdown.Item>\n                {this.props.matrices.keySeq().map(k =>\n                  <Dropdown.Item key={k} value={k}>{k}</Dropdown.Item>\n                )}\n              </Dropdown>\n            </Level.Item>\n            <Level.Item>\n              <Dropdown value={this.state.matrix_2} onChange={this.onChange2}>\n                <Dropdown.Item value=\"\">Select Matrix</Dropdown.Item>\n                {this.props.matrices.keySeq().map(k =>\n                  <Dropdown.Item key={k} value={k}>{k}</Dropdown.Item>\n                )}\n              </Dropdown>\n            </Level.Item>\n          </Level.Side>\n\n          <Level.Side align=\"right\">\n            <Level.Item>\n              <input\n                className=\"input\"\n                type=\"text\"\n                value={this.state.resultVariable}\n                placeholder=\"Store Result As\"\n                onChange={this.updateResultVariable} />\n            </Level.Item>\n          </Level.Side>\n\n        </Level>\n        <br />\n        <Level>\n          <Level.Side align=\"left\">\n          </Level.Side>\n          <Level.Side align=\"right\">\n            <Level.Item>\n              <Button onClick={this.multiply}>Multiply</Button>\n            </Level.Item>\n          </Level.Side>\n        </Level>\n      </Box>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    matrices: state.matrices\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    multiply\n  },\n    dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Multiply);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\n\nimport { invert } from \"actions/operations\"\nimport { Dropdown, Level, Button, Box } from \"react-bulma-components/full\"\n\nclass Invert extends Component {\n    constructor(props) {\n        super(props)\n        this.matrixSelected = this.matrixSelected.bind(this)\n        this.updateResultVariable = this.updateResultVariable.bind(this)\n        this.invert = this.invert.bind(this)\n        this.state = { matrix: \"\", resultVariable: \"\" }\n    }\n\n    matrixSelected = function (selected) {\n        this.setState({ matrix: selected });\n        if (selected !== \"\") {\n            this.setState({ resultVariable: `${selected}_INV` })\n        } else {\n            this.setState({ resultVariable: \"\" })\n        }\n    };\n\n    updateResultVariable = input => {\n        this.setState({ resultVariable: input.target.value })\n    }\n\n    invert = () => {\n        this.props.invert(this.state.matrix, this.state.resultVariable)\n    }\n\n    render() {\n        return (\n            <Box>\n                <Level>\n                    <Level.Side align=\"left\">\n                        <Level.Item>\n                            <Dropdown value={this.state.matrix} onChange={this.matrixSelected}>\n                                <Dropdown.Item value=\"\">Select Matrix</Dropdown.Item>\n                                {this.props.matrices.keySeq().map(k =>\n                                    <Dropdown.Item key={k} value={k}>{k}</Dropdown.Item>\n                                )}\n                            </Dropdown>\n                        </Level.Item>\n                    </Level.Side>\n\n                    <Level.Side align=\"right\">\n                        <Level.Item>\n                            <input\n                                className=\"input\"\n                                type=\"text\"\n                                value={this.state.resultVariable}\n                                placeholder=\"Store Result As\"\n                                onChange={this.updateResultVariable} />\n                        </Level.Item>\n                    </Level.Side>\n\n                </Level>\n                <br />\n                <Level>\n                    <Level.Side align=\"left\">\n                    </Level.Side>\n                    <Level.Side align=\"right\">\n                        <Level.Item>\n                            <Button onClick={this.invert}>Invert</Button>\n                        </Level.Item>\n                    </Level.Side>\n                </Level>\n            </Box>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        matrices: state.matrices\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        invert\n    },\n        dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Invert);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\n\nimport { upsertMatrix } from \"actions/matrices\"\nimport { Dropdown } from \"react-bulma-components/full\"\nimport Multiply from \"components/controlPanel/operations/Multiply\"\nimport Invert from \"components/controlPanel/operations/Invert\"\n\nclass ControlPanel extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { selected: \"\" }\n  }\n\n  onChange = selected => {\n    this.setState({ selected });\n  };\n\n  render() {\n    return (\n      <div>\n        <h2 className=\"title is-2\">Operations</h2>\n        <div className=\"box\">\n          <Dropdown value={this.state.selected} onChange={this.onChange} color=\"info\">\n            <Dropdown.Item value=\"\">Select</Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item value=\"multiply\">Multiply</Dropdown.Item>\n            <Dropdown.Item value=\"invert\">Invert</Dropdown.Item>\n          </Dropdown>\n          <hr />\n          {this.state.selected === \"multiply\" && <Multiply />}\n          {this.state.selected === \"invert\" && <Invert />}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    matrices: state.matrices\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    upsertMatrix\n  },\n    dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);","import React, { Component } from 'react';\n\nimport MatricesBank from \"components/matricesBank/MatricesBank\"\nimport ControlPanel from \"components/controlPanel/ControlPanel\"\n\nclass MatrixGUI extends Component {\n\n  render() {\n    return (\n      <div className=\"container\">\n        <section className=\"section\">\n          <MatricesBank />\n        </section>\n        <section className=\"section\">\n          <ControlPanel />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default MatrixGUI;\n","import React, { Component } from 'react';\n\nimport MatrixGUI from \"components/MatrixGUI\"\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <MatrixGUI />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import 'bulma/css/bulma.css'\n\nimport React from 'react';\nimport { render } from 'react-dom'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from 'reducers'\n\nimport { createEpicMiddleware } from 'redux-observable';\nimport { rootEpic } from 'epics'\n\nimport { createLogger } from 'redux-logger'\nimport Immutable from 'immutable'\nimport 'rxjs';\n\nimport App from 'App';\n\nconst logger = createLogger({\n  stateTransformer: (state) => {\n    let newState = {};\n\n    for (var i of Object.keys(state)) {\n      if (Immutable.Iterable.isIterable(state[i])) {\n        newState[i] = state[i].toJS();\n      } else {\n        newState[i] = state[i];\n      }\n    };\n\n    return newState;\n  }\n});\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(epicMiddleware, logger)\n)\n\nepicMiddleware.run(rootEpic);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}