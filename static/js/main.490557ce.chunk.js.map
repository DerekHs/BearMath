{"version":3,"sources":["actions/actions.js","reducers/matrices.js","reducers/index.js","actions/multiply.js","actions/matrices.js","epics/multiplyEpic.js","epics/index.js","components/common/Matrix.js","components/common/ModalWrapper.js","components/common/InputGrid.js","components/common/ResponsiveIcon.js","components/matricesBank/RichMatrix.js","components/matricesBank/MatricesBank.js","components/createMatrix/CreateMatrix.js","components/controlPanel/operations/Multiply.js","components/controlPanel/operations/Invert.js","components/controlPanel/ControlPanel.js","components/MatrixGUI.js","App.js","index.js"],"names":["MULTIPLY_BEGIN","MULTIPLY_ERROR","UPSERT_MATRIX","RENAME_MATRIX","DELETE_MATRIX","initialState","OrderedMap","fibonacci_q","Map","shape","List","numericValues","first_fibonacci","matrices","state","arguments","length","undefined","action","type","contains","name","updateIn","set","mapKeys","k","newName","remove","combineReducers","multiplyBegin","m1","m2","resultVariable","upsertMatrix","renameMatrix","deleteMatrix","rootEpic","combineEpics","action$","state$","pipe","ofType","mergeMap","ajax","url","method","headers","Content-Type","body","matrix_1","value","get","toJS","data","matrix_2","map","response","JSON","parse","catchError","error","of","errorMessage","Matrix","props","rows","cols","count","fragments","_props$data$get","_props$data$get2","Object","slicedToArray","push","slice","join","math","katex","renderToString","this","convertStateToLatex","react_default","a","createElement","Parser","Component","ModalWrapper","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","modalState","toggleModal","bind","assertThisInitialized","setState","prev","React","cloneElement","children","onClick","ModalWrapper_Modal","closeModal","title","toggle","Modal","_ref","className","InputGrid","finishedPopulating","create","numRows","initialRows","numCols","initialCols","matrixName","edit","clone","today","Date","timestamp","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","addRow","addCol","removeRow","removeCol","submit","updateMatrixName","getStartingValue","setFinishedPopulating","prevState","Math","min","max","objectSpread","r","c","concat","i","j","size","status","_this2","ret","placeholder","onChange","e","target","style","paddingTop","toConsumableArray","Array","keys","key","disabled","fontSize","defaultValue","ref","input","connect","dispatch","bindActionCreators","ResponsiveIcon","hover","hoverOn","hoverOff","icon","cursor","onMouseEnter","onMouseLeave","RichMatrix","common_Matrix","common_ModalWrapper","common_ResponsiveIcon","common_InputGrid","MatricesBank","entrySeq","_ref2","v","matricesBank_RichMatrix","CreateMatrix","Multiply","onChange_1","selected","onChange_2","updateResultVariable","multiply","onChange1","onChange2","full","Side","align","Item","keySeq","Invert","matrixSelected","console","log","matrix","ControlPanel","color","Divider","operations_Multiply","operations_Invert","MatrixGUI","createMatrix_CreateMatrix","matricesBank_MatricesBank","controlPanel_ControlPanel","App","components_MatrixGUI","logger","createLogger","stateTransformer","newState","_arr","_i","Immutable","Iterable","isIterable","epicMiddleware","createEpicMiddleware","store","createStore","rootReducer","applyMiddleware","run","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.490557ce.chunk.js","sourcesContent":["/* Contains definitons of actions */\n\nexport const MULTIPLY_BEGIN = \"MULTIPLY_BEGIN\"\nexport const MULTIPLY_SUCCESS = \"MULTIPLY_SUCCESS\"\nexport const MULTIPLY_ERROR = \"MULTIPLY_ERROR\"\n\nexport const UPSERT_MATRIX = \"UPSERT_MATRIX\"\nexport const RENAME_MATRIX = \"RENAME_MATRIX\"\nexport const DELETE_MATRIX = \"DELETE_MATRIX\"\n\nexport const APPEND_LINE = \"APPEND_LINE\"","import { UPSERT_MATRIX, RENAME_MATRIX, DELETE_MATRIX } from \"../actions/actions\";\nimport { OrderedMap, Map, List } from \"immutable\"\n\nconst initialState = new OrderedMap({\n  \"fibonacci_q\": new Map({ shape: new List([2, 2]), numericValues: new List([1, 1, 1, 0]) }),\n  \"first_fibonacci\": new Map({ shape: new List([2, 1]), numericValues: new List([1, 1]) })\n})\n\nconst matrices = (state = initialState, action) => {\n  switch (action.type) {\n    case UPSERT_MATRIX:\n      if (state.contains(action.name)) {\n        return state.updateIn([action.name], () => new Map({ shape: action.shape, numericValues: action.numericValues }))\n      }\n      return state.set(action.name, new Map({ shape: action.shape, numericValues: action.numericValues }))\n    case RENAME_MATRIX:\n      return state.mapKeys(k => {\n        if (k == action.name) {\n          return action.newName\n        }\n        return k\n      })\n    case DELETE_MATRIX:\n      return state.remove(action.name)\n    default:\n      return state\n  }\n}\n\nexport default matrices\n","\nimport { combineReducers } from 'redux'\nimport matrices from './matrices'\n\nexport default combineReducers({\n    matrices,\n})\n","import { MULTIPLY_BEGIN, MULTIPLY_SUCCESS, MULTIPLY_ERROR } from \"actions/actions\"\n\nexport function multiplyBegin(m1, m2, resultVariable) {\n    return {\n        type: MULTIPLY_BEGIN,\n        m1,\n        m2,\n        resultVariable\n    }\n}\n\nexport function multiplySuccess(result) {\n    console.log(result + \" yay, request succeeded\")\n    return {\n        type: MULTIPLY_SUCCESS,\n        result\n    }\n}\n\nexport function multiplyError(errorMessage) {\n    return {\n        type: MULTIPLY_ERROR,\n        errorMessage\n    }\n}\n\n\n","import { UPSERT_MATRIX, RENAME_MATRIX, DELETE_MATRIX } from \"actions/actions\";\n\n\nexport function upsertMatrix(name, shape, numericValues) {\n    return {\n        type: UPSERT_MATRIX,\n        name,\n        shape,\n        numericValues\n    }\n}\n\nexport function renameMatrix(name, newName) {\n    return {\n        type: RENAME_MATRIX,\n        name,\n        newName\n    }\n}\n\nexport function deleteMatrix(name) {\n    return {\n        type: DELETE_MATRIX,\n        name\n    }\n}\n","import { mergeMap, catchError, map } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax'\nimport { of } from 'rxjs';\nimport { ofType } from 'redux-observable'\n\n\nimport { multiplySuccess, multiplyError } from 'actions/multiply'\nimport { upsertMatrix } from 'actions/matrices'\nimport { MULTIPLY_BEGIN } from 'actions/actions'\n\nimport { List } from 'immutable'\n\nexport const multiplyEpic = (action$, state$) => action$.pipe(\n    ofType(MULTIPLY_BEGIN),\n    mergeMap(action =>\n        ajax({\n            url: 'https://nzr58np206.execute-api.us-west-2.amazonaws.com/beta-prod/operations/multiply',\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: {\n                matrix_1: {\n                    shape: state$.value.matrices.get(action.m1).get(\"shape\").toJS(),\n                    data: state$.value.matrices.get(action.m1).get(\"numericValues\").toJS()\n                },\n                matrix_2: {\n                    shape: state$.value.matrices.get(action.m2).get(\"shape\").toJS(),\n                    data: state$.value.matrices.get(action.m2).get(\"numericValues\").toJS()\n                }\n            }\n        }).pipe(\n            map(response => upsertMatrix(action.resultVariable, new List(JSON.parse(response.response.body).shape), new List(JSON.parse(response.response.body).data))),\n            catchError(error => of(multiplyError(error)))\n        )\n    )\n)\n","import { combineEpics } from 'redux-observable';\nimport { multiplyEpic } from 'epics/multiplyEpic'\n\nexport const rootEpic = combineEpics(\n    multiplyEpic,\n);","import React, { Component } from 'react';\nimport { List } from 'immutable';\nimport katex from 'katex';\nimport Parser from 'html-react-parser';\n\nconst START = \"\\\\begin{pmatrix}\"\nconst END = \"\\\\end{pmatrix}\"\n\nclass Matrix extends Component {\n    convertStateToLatex(props) {\n        let fragments = new List()\n        var numericValues = props.data.get('numericValues')\n        var rows, cols\n        [rows, cols] = props.data.get('shape')\n        var count\n        for (count = 0; count < rows; count++) {\n            fragments = fragments\n                .push(numericValues\n                    .slice(count * cols, (count + 1) * cols)\n                    .join(' & '))\n        }\n        return START + fragments.join(' \\\\\\\\ ') + END\n    }\n\n    render() {\n        let math = katex.renderToString(this.convertStateToLatex(this.props));\n        return (\n            <div>{Parser(math)}</div>\n        )\n    }\n}\n\nexport default Matrix;","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass ModalWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalState: false\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  toggleModal() {\n    this.setState((prev, props) => {\n      const newState = !prev.modalState;\n\n      return { modalState: newState };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {React.cloneElement(this.props.children[0], { onClick: this.toggleModal })}\n        </div>\n\n        <Modal\n          closeModal={this.toggleModal}\n          modalState={this.state.modalState}\n          title={this.props.children[1]}\n        >\n          {React.cloneElement(this.props.children[2], { toggle: this.toggleModal })}\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst Modal = ({ children, closeModal, modalState, title }) => {\n  if (!modalState) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" onClick={closeModal} />\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">{title}</p>\n          <button className=\"delete\" onClick={closeModal} />\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"content\">\n            {children}\n          </div>\n        </section>\n        <footer className=\"modal-card-foot\">\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  modalState: PropTypes.bool.isRequired,\n  title: PropTypes.string\n}\n\nexport default ModalWrapper;","import React from 'react';\nimport { bindActionCreators } from 'redux'\nimport { connect } from \"react-redux\"\nimport { List } from 'immutable';\n\nimport { upsertMatrix } from \"actions/matrices\"\nimport { renameMatrix } from \"actions/matrices\"\n\nclass InputGrid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.finishedPopulating = false\n        if (props.create) {\n            this.state = {\n                numRows: props.initialRows,\n                numCols: props.initialCols,\n                matrixName: ''\n            }\n        }\n\n        else if (props.edit) {\n            this.state = {\n                numRows: props.data.get('shape').get(0),\n                numCols: props.data.get('shape').get(1),\n                numericValues: props.data.get('numericValues'),\n                matrixName: props.matrixName\n            }\n        }\n\n        else if (props.clone) {\n            var today = new Date();\n            var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n            var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            var timestamp = date + ' ' + time\n            this.state = {\n                numRows: props.data.get('shape').get(0),\n                numCols: props.data.get('shape').get(1),\n                numericValues: props.data.get('numericValues'),\n                matrixName: props.matrixName + ' ' + \"__CLONED_AT__\" + timestamp\n            }\n        }\n\n        this.addRow = this.addRow.bind(this)\n        this.addCol = this.addCol.bind(this)\n        this.removeRow = this.removeRow.bind(this)\n        this.removeCol = this.removeCol.bind(this)\n        this.submit = this.submit.bind(this)\n        this.updateMatrixName = this.updateMatrixName.bind(this)\n        this.getStartingValue = this.getStartingValue.bind(this)\n        this.setFinishedPopulating = this.setFinishedPopulating.bind(this)\n    }\n\n    addRow() {\n        this.setState((prevState) => ({\n            numRows: Math.min(prevState.numRows + 1, 7)\n        }))\n    }\n\n    addCol() {\n        this.setState((prevState) => ({\n            numCols: Math.min(prevState.numCols + 1, 7)\n        }))\n    }\n\n    removeRow() {\n        this.setState((prevState) => ({\n            numRows: Math.max(prevState.numRows - 1, 1)\n        }))\n    }\n\n    removeCol() {\n        this.setState((prevState) => ({\n            numCols: Math.max(prevState.numCols - 1, 1)\n        }))\n    }\n\n    updateMatrixName(newName) {\n        this.setState(\n            { ...this.state, matrixName: newName }\n        )\n    }\n\n    submit() {\n        let numericValues = new List()\n        for (let r = 0; r < this.state.numRows; r++) {\n            for (let c = 0; c < this.state.numCols; c++) {\n                numericValues = numericValues.push(this[`textInput${r},${c}`].value)\n            }\n        }\n        if (this.props.edit) {\n            this.props.upsertMatrix(this.props.matrixName, new List([this.state.numRows, this.state.numCols]), numericValues)\n            this.props.renameMatrix(this.props.matrixName, this.state.matrixName)\n        }\n        this.props.upsertMatrix(this.state.matrixName, new List([this.state.numRows, this.state.numCols]), numericValues)\n        this.props.toggle()\n    }\n\n    getStartingValue(i, j) {\n        if (this.state.numericValues &&\n            i * this.state.numCols + j < this.state.numericValues.size &&\n            !this.finishedPopulating) {\n            return this.state.numericValues.get(i * this.state.numCols + j)\n        }\n        return 0\n    }\n\n    setFinishedPopulating(status) {\n        this.finishedPopulating = status\n    }\n\n    render() {\n        let ret = (\n            <div className=\"columns\">\n                <div className=\"column\">\n                    <input\n                        className=\"input\"\n                        type=\"text\"\n                        value={this.state.matrixName}\n                        placeholder=\"Matrix Name\"\n                        onChange={(e) => this.updateMatrixName(e.target.value)} />\n                    <div className=\"columns\" style={{ paddingTop: \"25px\" }}>\n                        <div className=\"column is-narrow\">\n                            {[...Array(this.state.numRows).keys()].map(i =>\n                                <div key={i}>\n                                    {[...Array(this.state.numCols).keys()].map(j =>\n                                        <input\n                                            type=\"text\"\n                                            disabled={this.props.clone}\n                                            size=\"4\"\n                                            style={{ fontSize: \"20px\" }}\n                                            defaultValue={this.getStartingValue(i, j)}\n                                            key={`${i},${j}`}\n                                            ref={input => { this[`textInput${i},${j}`] = input }} />\n                                    )}\n                                    <br />\n                                </div>)}\n                        </div>\n                        <div className=\"column is-one-fifth has-text-left\">\n                            <button className=\"button is-small\" onClick={this.removeRow}>Rem. Row</button>\n                            <br />\n                            <button className=\"button is-small\" onClick={this.addRow}>Add Row</button>\n                        </div>\n                    </div>\n\n                    <div className=\"columns\" >\n                        <div className=\"column is-narrow has-text-left\">\n                            <span className=\"button is-small\" onClick={this.removeCol}>Rem. Col</span>\n                            <span className=\"button is-small\" onClick={this.addCol}>Add Col</span>\n                            <div style={{ paddingTop: \"20px\" }}>\n                                <button className=\"button\" onClick={this.submit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n        this.setFinishedPopulating(true)\n        return ret\n    }\n}\n\n\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        upsertMatrix,\n        renameMatrix\n    },\n        dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(InputGrid);\n\n","import React from 'react';\n\nclass ResponsiveIcon extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false\n        }\n        this.hoverOn = this.hoverOn.bind(this)\n        this.hoverOff = this.hoverOff.bind(this)\n    }\n\n    hoverOn() {\n        this.setState({ hover: true });\n    }\n\n    hoverOff() {\n        this.setState({ hover: false });\n    }\n\n    render() {\n        return (\n            <i className={this.state.hover ? \"fas \" + this.props.icon : \"far \" + this.props.icon}\n                style={{ cursor: \"pointer\" }}\n                onMouseEnter={this.hoverOn}\n                onMouseLeave={this.hoverOff}\n                onClick={this.props.onClick}\n                title={this.props.title}\n            ></i>\n        )\n    }\n}\n\nexport default ResponsiveIcon;\n\n","import React from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\nimport { deleteMatrix } from \"actions/matrices\"\nimport Matrix from \"components/common/Matrix\"\nimport ModalWrapper from \"components/common/ModalWrapper\"\nimport InputGrid from \"components/common/InputGrid\"\nimport ResponsiveIcon from \"components/common/ResponsiveIcon\"\n\nclass RichMatrix extends React.Component {\n    render() {\n        return (\n            <div className=\"box has-text-centered\">\n                <Matrix data={this.props.data} />\n                {this.props.matrixName}\n                <br />\n                <span className=\"icon has-text-info\" >\n                    <ModalWrapper>\n                        <ResponsiveIcon icon=\"fa-edit\" title=\"Edit the matrix in place\" />\n                        {this.props.name}\n                        <InputGrid data={this.props.data} matrixName={this.props.matrixName} edit />\n                    </ModalWrapper>\n                </span>\n                <span className=\"icon has-text-info\" >\n                    <ModalWrapper>\n                        <ResponsiveIcon icon=\"fa-clone\" title=\"Create a duplicate of this matrix\" />\n                        {this.props.name}\n                        <InputGrid data={this.props.data} matrixName={this.props.matrixName} clone />\n                    </ModalWrapper>\n                </span>\n                <span className=\"icon has-text-info\" >\n                    <ResponsiveIcon icon=\"fa-trash-alt\" onClick={() => this.props.deleteMatrix(this.props.matrixName)} title=\"Delete this matrix\" />\n                </span>\n            </div>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        deleteMatrix\n    },\n        dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(RichMatrix);\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\n\nimport RichMatrix from 'components/matricesBank/RichMatrix';\n\n\nclass MatricesBank extends Component {\n\n  render() {\n    return (\n      <div>\n        <h1>Matrix Bank</h1>\n        <div className=\"box\">\n          <div className=\"columns is-multiline\">\n            {this.props.matrices.entrySeq().map(([k, v]) =>\n              <div className=\"column is-narrow\" key={k}>\n                <RichMatrix\n                  data={v}\n                  matrixName={k}\n                  key={k}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    matrices: state.matrices\n  }\n}\n\nexport default connect(mapStateToProps)(MatricesBank);\n","import React from 'react';\nimport ModalWrapper from 'components/common/ModalWrapper'\nimport InputGrid from 'components/common/InputGrid'\n\nclass CreateMatrix extends React.Component {\n  render() {\n    return (\n      <ModalWrapper>\n        <button className=\"button is-primary\">\n          Create New Matrix\n        </button>\n        Create New Matrix\n        <InputGrid initialRows={2} initialCols={2} create />\n      </ModalWrapper>\n    )\n  }\n}\n\nexport default CreateMatrix;","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\n\nimport { multiplyBegin } from \"actions/multiply\"\nimport { Dropdown, Level, Button, Box } from \"react-bulma-components/full\"\n\nclass Multiply extends Component {\n  constructor(props) {\n    super(props)\n    this.onChange1 = this.onChange_1.bind(this)\n    this.onChange2 = this.onChange_2.bind(this)\n    this.updateResultVariable = this.updateResultVariable.bind(this)\n    this.multiply = this.multiply.bind(this)\n    this.state = { matrix_1: \"\", matrix_2: \"\", resultVariable: \"\" }\n  }\n\n  onChange_1 = selected => {\n    this.setState({ matrix_1: selected });\n  };\n\n  onChange_2 = selected => {\n    this.setState({ matrix_2: selected });\n  };\n\n  updateResultVariable = input => {\n    this.setState({ resultVariable: input.target.value })\n  }\n\n  multiply = () => {\n    this.props.multiplyBegin(this.state.matrix_1, this.state.matrix_2, this.state.resultVariable)\n  }\n\n  render() {\n    return (\n      <Box>\n        <Level>\n          <Level.Side align=\"left\">\n            <Level.Item>\n              <Dropdown value={this.state.matrix_1} onChange={this.onChange1}>\n                <Dropdown.Item value=\"\">Select Matrix</Dropdown.Item>\n                {this.props.matrices.keySeq().map(k =>\n                  <Dropdown.Item key={k} value={k}>{k}</Dropdown.Item>\n                )}\n              </Dropdown>\n            </Level.Item>\n            <Level.Item>\n              <Dropdown value={this.state.matrix_2} onChange={this.onChange2}>\n                <Dropdown.Item value=\"\">Select Matrix</Dropdown.Item>\n                {this.props.matrices.keySeq().map(k =>\n                  <Dropdown.Item key={k} value={k}>{k}</Dropdown.Item>\n                )}\n              </Dropdown>\n            </Level.Item>\n          </Level.Side>\n\n          <Level.Side align=\"right\">\n            <Level.Item>\n              <input\n                className=\"input\"\n                type=\"text\"\n                value={this.state.resultVariable}\n                placeholder=\"Store Result As\"\n                onChange={this.updateResultVariable} />\n            </Level.Item>\n          </Level.Side>\n\n        </Level>\n        <br />\n        <Level>\n          <Level.Side align=\"left\">\n          </Level.Side>\n          <Level.Side align=\"right\">\n            <Level.Item>\n              <Button onClick={this.multiply}>Multiply</Button>\n            </Level.Item>\n          </Level.Side>\n        </Level>\n      </Box>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    matrices: state.matrices\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    multiplyBegin\n  },\n    dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Multiply);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\n\nimport { multiplyBegin } from \"actions/multiply\"\nimport { Dropdown, Level, Button, Box } from \"react-bulma-components/full\"\n\nclass Invert extends Component {\n    constructor(props) {\n        super(props)\n        this.matrixSelected = this.matrixSelected.bind(this)\n        this.updateResultVariable = this.updateResultVariable.bind(this)\n        this.multiply = this.multiply.bind(this)\n        this.state = { matrix: \"\", resultVariable: \"\" }\n    }\n\n    matrixSelected = function (selected) {\n        console.log(selected)\n        this.setState({ matrix: selected });\n        if (selected !== \"\") {\n            this.setState({ resultVariable: `${selected}_INV` })\n        } else {\n            this.setState({ resultVariable: \"\" })\n        }\n    };\n\n    updateResultVariable = input => {\n        this.setState({ resultVariable: input.target.value })\n    }\n\n    multiply = () => {\n        this.props.multiplyBegin(this.state.matrix_1, this.state.matrix_2, this.state.resultVariable)\n    }\n\n    render() {\n        return (\n            <Box>\n                <Level>\n                    <Level.Side align=\"left\">\n                        <Level.Item>\n                            <Dropdown value={this.state.matrix} onChange={this.matrixSelected}>\n                                <Dropdown.Item value=\"\">Select Matrix</Dropdown.Item>\n                                {this.props.matrices.keySeq().map(k =>\n                                    <Dropdown.Item key={k} value={k}>{k}</Dropdown.Item>\n                                )}\n                            </Dropdown>\n                        </Level.Item>\n                    </Level.Side>\n\n                    <Level.Side align=\"right\">\n                        <Level.Item>\n                            <input\n                                className=\"input\"\n                                type=\"text\"\n                                value={this.state.resultVariable}\n                                placeholder=\"Store Result As\"\n                                onChange={this.updateResultVariable} />\n                        </Level.Item>\n                    </Level.Side>\n\n                </Level>\n                <br />\n                <Level>\n                    <Level.Side align=\"left\">\n                    </Level.Side>\n                    <Level.Side align=\"right\">\n                        <Level.Item>\n                            <Button onClick={this.multiply}>Multiply</Button>\n                        </Level.Item>\n                    </Level.Side>\n                </Level>\n            </Box>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        matrices: state.matrices\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        multiplyBegin\n    },\n        dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Invert);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\n\nimport { upsertMatrix } from \"actions/matrices\"\nimport { Dropdown } from \"react-bulma-components/full\"\nimport Multiply from \"components/controlPanel/operations/Multiply\"\nimport Invert from \"components/controlPanel/operations/Invert\"\n\nclass ControlPanel extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { selected: \"\" }\n  }\n\n  onChange = selected => {\n    this.setState({ selected });\n  };\n\n  render() {\n    return (\n      <div className=\"box\">\n        <Dropdown value={this.state.selected} onChange={this.onChange} color=\"info\">\n          <Dropdown.Item value=\"\">Select</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item value=\"multiply\">Multiply</Dropdown.Item>\n          <Dropdown.Item value=\"invert\">Invert</Dropdown.Item>\n        </Dropdown>\n        <hr />\n        {this.state.selected === \"multiply\" && <Multiply />}\n        {this.state.selected === \"invert\" && <Invert />}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    matrices: state.matrices\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    upsertMatrix\n  },\n    dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);","import React, { Component } from 'react';\n\nimport MatricesBank from \"components/matricesBank/MatricesBank\"\nimport CreateMatrix from \"components/createMatrix/CreateMatrix\"\nimport ControlPanel from \"components/controlPanel/ControlPanel\"\n\nclass MatrixGUI extends Component {\n\n  render() {\n    return (\n      <div>\n        <section className=\"section\">\n          <CreateMatrix />\n        </section>\n        <section className=\"section\">\n          <MatricesBank />\n        </section>\n        <section className=\"section\">\n          <ControlPanel />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default MatrixGUI;\n","import React, { Component } from 'react';\n\nimport MatrixGUI from \"components/MatrixGUI\"\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <MatrixGUI/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import 'bulma/css/bulma.css'\n\nimport React from 'react';\nimport { render } from 'react-dom'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from 'reducers'\n\nimport { createEpicMiddleware } from 'redux-observable';\nimport { rootEpic } from 'epics'\n\nimport { createLogger } from 'redux-logger'\nimport Immutable from 'immutable'\nimport 'rxjs';\n\nimport App from 'App';\n\nconst logger = createLogger({\n  stateTransformer: (state) => {\n    let newState = {};\n\n    for (var i of Object.keys(state)) {\n      if (Immutable.Iterable.isIterable(state[i])) {\n        newState[i] = state[i].toJS();\n      } else {\n        newState[i] = state[i];\n      }\n    };\n\n    return newState;\n  }\n});\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(epicMiddleware, logger)\n)\n\nepicMiddleware.run(rootEpic);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}