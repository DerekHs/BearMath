{"version":3,"sources":["actions/actions.js","util/Ndarray.js","reducers/matrices.js","util/Composite.js","reducers/composites.js","reducers/scalars.js","reducers/error.js","reducers/index.js","actions/operation.js","epics/operationEpic.js","epics/index.js","components/common/ModalWrapper.js","actions/matrices.js","components/common/InputGrid.js","components/createMatrix/CreateMatrix.js","components/common/Matrix.js","components/common/ResponsiveIcon.js","components/banks/matricesBank/RichMatrix.js","components/banks/BankWrapper.js","components/banks/matricesBank/MatricesBank.js","components/banks/compositeBank/CompositeMatrix.js","components/banks/compositeBank/CompositeBank.js","components/controlPanel/operations/GenericOperation.js","components/controlPanel/CodeCreators.js","components/controlPanel/ControlPanel.js","components/MatrixGUI.js","App.js","index.js"],"names":["OPERATION_BEGIN","OPERATION_SUCCESS","OPERATION_ERROR","UPSERT_MATRIX","RENAME_MATRIX","DELETE_MATRIX","Ndarray","numericValues","shape","Object","classCallCheck","this","initialState","OrderedMap","foo","fos","example","matrices","state","arguments","length","undefined","action","type","contains","name","updateIn","set","mapKeys","k","newName","remove","result","validOperation","dataType","ndarray","resultVariable","Composite","namev","ndarrayv","_this","map","e","i","ninjas","samurai","console","log","misc","meaningOfLife","weinersConstant","scalars","error","combineReducers","generatedCode","composites","operationBegin","command","dataNames","dataTypes","createBody","lookupMatrix","matrixType","matrixName","databank","get","typeDataTuples","index","assign","apply","toConsumableArray","defineProperty","rootEpic","combineEpics","action$","state$","pipe","ofType","mergeMap","ajax","url","method","headers","Content-Type","body","value","response","catchError","of","errorMessage","ModalWrapper","props","possibleConstructorReturn","getPrototypeOf","call","modalState","toggleModal","bind","assertThisInitialized","setState","prev","react_default","a","createElement","React","cloneElement","children","onClick","ModalWrapper_Modal","closeModal","title","toggle","Component","Modal","_ref","className","upsertMatrix","renameMatrix","deleteMatrix","InputGrid","create","numRows","initialRows","numCols","initialCols","finishedPopulating","edit","rows","cols","clone","today","Date","timestamp","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","addRow","addCol","removeRow","removeCol","submit","updateMatrixName","getStartingValue","setFinishedPopulating","prevState","Math","min","max","objectSpread","r","c","push","concat","j","status","_this2","ret","placeholder","onChange","target","style","paddingTop","Array","keys","key","size","fontSize","defaultValue","ref","element","connect","dispatch","bindActionCreators","CreateMatrix","common_ModalWrapper","common_InputGrid","Matrix","count","fragments","List","float","round","pow","_props$ndarray$shape","slicedToArray","slice","join","math","katex","renderToString","convertStateToLatex","Parser","ResponsiveIcon","hover","hoverOn","hoverOff","icon","cursor","onMouseEnter","onMouseLeave","RichMatrix","common_Matrix","common_ResponsiveIcon","BankWrapper","createNew","MatrixBank","banks_BankWrapper","createMatrix_CreateMatrix","matrixMap","entrySeq","_ref2","v","matricesBank_RichMatrix","CompositeMatrix","composite","nameMatrixPairs","CompositeBank","compositeMap","compositeBank_CompositeMatrix","GenericOperation","operate","argv","numDropdowns","codeCreator","showWarning","displayWarning","closeWarning","matrix_1","matrix_2","disabled","keySeq","mostRecentError","full","invert","invertTypes","transpose","transposeTypes","add","addTypes","subtract","subtractTypes","multiply","multiplyTypes","svd","svdTypes","eigenvectors","eigenvectorsTypes","ControlPanel","selected","color","Item","Divider","operations_GenericOperation","Creators","MatrixGUI","MatricesBank","compositeBank_CompositeBank","controlPanel_ControlPanel","App","components_MatrixGUI","logger","createLogger","stateTransformer","newState","_arr","_i","Immutable","Iterable","isIterable","toJS","epicMiddleware","createEpicMiddleware","store","createStore","rootReducer","applyMiddleware","run","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.720be9e6.chunk.js","sourcesContent":["/* Contains definitons of actions */\n\nexport const OPERATION_BEGIN = \"OPERATION_BEGIN\"\nexport const OPERATION_SUCCESS = \"OPERATION_SUCCESS\"\nexport const OPERATION_ERROR = \"OPERATION_ERROR\"\n\nexport const UPSERT_MATRIX = \"UPSERT_MATRIX\"\nexport const RENAME_MATRIX = \"RENAME_MATRIX\"\nexport const DELETE_MATRIX = \"DELETE_MATRIX\"\n\nexport const UPSERT_COMPOSITE = \"UPSERT_COMPOSITE\"\nexport const RENAME_COMPOSITE = \"RENAME_COMPOSITE\"\nexport const DELETE_COMPOSITE = \"DELETE_COMPOSITE\"\n\nexport const UPSERT_SCALAR = \"UPSERT_SCALAR\"\nexport const RENAME_SCALAR = \"RENAME_SCALAR\"\nexport const DELETE_SCALAR = \"DELETE_SCALAR\"","export default class Ndarray {\n    constructor(numericValues, shape) {\n        this.numericValues = numericValues;\n        this.shape = shape;\n    }\n\n    rows() {\n        return this.shape[0]\n    }\n\n    cols() {\n        return this.shape[1]\n    }\n\n    toMap() {\n        return {\n            numericValues: this.numericValues,\n            shape: this.shape\n        }\n    }\n}","import { UPSERT_MATRIX, RENAME_MATRIX, DELETE_MATRIX, OPERATION_SUCCESS } from \"../actions/actions\";\nimport { OrderedMap } from \"immutable\"\n\nimport Ndarray from \"util/Ndarray\"\n\nconst initialState = new OrderedMap({\n  foo: new Ndarray([1, 1, 1, 0], [2, 2]),\n  fos: new Ndarray([1, 1], [1, 2]),\n  example: new Ndarray([3, 2, 2, 2, 3, -2], [2, 3])\n})\n\nconst matrices = (state = initialState, action) => {\n  switch (action.type) {\n    case UPSERT_MATRIX:\n      if (state.contains(action.name)) {\n        return state.updateIn([action.name], () => new Ndarray(action.numericValues, action.shape))\n      }\n      return state.set(action.name, new Ndarray(action.numericValues, action.shape))\n    case RENAME_MATRIX:\n      return state.mapKeys(k => {\n        if (k === action.name) {\n          return action.newName\n        }\n        return k\n      })\n    case DELETE_MATRIX:\n      return state.remove(action.name)\n    case OPERATION_SUCCESS:\n      if (action.result.validOperation && action.result.dataType === 'SCALAR') {\n        let ndarray = action.result.result\n        if (state.contains(action.result.resultVariable)) {\n          return state.updateIn([action.resultVariable], () => new Ndarray(ndarray.numericValues, ndarray.shape))\n        }\n        return state.set(action.resultVariable, new Ndarray(ndarray.numericValues, ndarray.shape))\n      }\n      return state\n    default:\n      return state\n  }\n}\n\nexport default matrices\n","export default class Composite {\n    constructor(namev, ndarrayv) {\n        this.namev = namev\n        this.ndarrayv = ndarrayv\n    }\n\n    get size() {\n        return this.namev.length\n    }\n\n    get nameMatrixPairs() {\n        return this.namev.map((e, i) => {\n            return [e, this.ndarrayv[i]];\n        });\n    }\n}","import { OPERATION_SUCCESS } from \"../actions/actions\";\nimport { OrderedMap } from \"immutable\"\n\nimport Ndarray from \"util/Ndarray\"\nimport Composite from \"util/Composite\"\n\nconst ndarrayv = [new Ndarray([1, 1, 1, 0], [2, 2]), new Ndarray([1, 1, 1, 4], [2, 2]), new Ndarray([1, 1, 1, 4], [2, 2])]\nconst namev = [\"sasuke\", \"sakura\", \"naruto\"]\n\nconst initialState = new OrderedMap({\n    ninjas: new Composite(namev, ndarrayv),\n    samurai: new Composite(namev, ndarrayv)\n})\n\nconst matrices = (state = initialState, action) => {\n    switch (action.type) {\n        case OPERATION_SUCCESS:\n            if (action.result.validOperation && action.result.dataType === 'TUPLE') {\n                console.log(action)\n                let namev = action.misc.namev\n                let ndarrayv = action.result.result\n                if (state.contains(action.result.resultVariable)) {\n                    return state.updateIn([action.resultVariable], () => new Composite(namev, ndarrayv))\n                }\n                return state.set(action.resultVariable, new Composite(namev, ndarrayv))\n            }\n            return state\n        default:\n            return state\n    }\n}\n\nexport default matrices\n","import { UPSERT_MATRIX, RENAME_MATRIX, DELETE_MATRIX, OPERATION_SUCCESS } from \"../actions/actions\";\nimport { OrderedMap } from \"immutable\"\n\nconst initialState = new OrderedMap({\n    meaningOfLife: 42,\n    weinersConstant: 2\n})\n\nconst scalars = (state = initialState, action) => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n\nexport default scalars","import { OPERATION_BEGIN, OPERATION_SUCCESS } from \"../actions/actions\";\n\nconst initialState = \"\"\n\nconst error = (state = initialState, action) => {\n    switch (action.type) {\n        case OPERATION_BEGIN:\n            return \"\"\n        case OPERATION_SUCCESS:\n            if (!action.result.validOperation) {\n                return action.result.result\n            }\n            return state\n        default:\n            return state\n    }\n}\n\nexport default error","\nimport { combineReducers } from 'redux'\nimport matrices from './matrices'\nimport generatedCode from './generatedCode'\nimport composites from './composites'\nimport scalars from './scalars'\nimport error from './error'\n\nexport default combineReducers({\n    matrices,\n    generatedCode,\n    composites,\n    scalars,\n    error\n})\n","import { OPERATION_BEGIN, OPERATION_SUCCESS, OPERATION_ERROR } from \"actions/actions\"\n\nexport function operationBegin(command, dataNames, dataTypes, resultVariable, misc) {\n    return {\n        type: OPERATION_BEGIN,\n        command,\n        dataNames,\n        dataTypes,\n        resultVariable,\n        misc\n    }\n}\n\nexport function operationSuccess(resultVariable, result, misc) {\n    return {\n        type: OPERATION_SUCCESS,\n        resultVariable,\n        result,\n        misc\n    }\n}\n\nexport function operationError(errorMessage) {\n    return {\n        type: OPERATION_ERROR,\n        errorMessage\n    }\n}\n\n\n","import { mergeMap, catchError, map } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax'\nimport { of } from 'rxjs';\nimport { ofType } from 'redux-observable'\n\n\nimport { operationError, operationSuccess } from 'actions/operation'\nimport { OPERATION_BEGIN } from 'actions/actions'\n\nexport const operationEpic = (action$, state$) => action$.pipe(\n    ofType(OPERATION_BEGIN),\n    mergeMap(action =>\n        ajax({\n            url: 'https://nzr58np206.execute-api.us-west-2.amazonaws.com/beta-prod/operation',\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: {\n                command: action.command,\n                matrices: createBody(action.dataNames, action.dataTypes, state$.value)\n            }\n        }).pipe(\n            map(response => operationSuccess(action.resultVariable, response.response.body, action.misc)),\n            catchError(error => of(operationError(error)))\n        )\n    )\n)\n\nfunction createBody(dataNames, dataTypes, state) {\n    function lookupMatrix(matrixType, matrixName) {\n        var databank = null\n        switch (matrixType) {\n            case \"NDARRAY\":\n                databank = state.matrices\n                break\n            case \"TUPLE\":\n                databank = state.composites\n                break\n            case \"SCALAR\":\n                databank = state.scalars\n                break\n            default:\n                return null\n        }\n        return databank.get(matrixName)\n    }\n\n    let typeDataTuples = dataTypes.map((dataType, index) => [dataType, lookupMatrix(dataType, dataNames[index])])\n    return Object.assign(...dataNames.map((k, i) => ({ [k]: typeDataTuples[i] })))\n}\n","import { combineEpics } from 'redux-observable';\nimport { operationEpic } from 'epics/operationEpic'\n\nexport const rootEpic = combineEpics(\n    operationEpic,\n);","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass ModalWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalState: false\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  toggleModal() {\n    this.setState((prev, props) => {\n      const newState = !prev.modalState;\n\n      return { modalState: newState };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {React.cloneElement(this.props.children[0], { onClick: this.toggleModal })}\n        </div>\n\n        <Modal\n          closeModal={this.toggleModal}\n          modalState={this.state.modalState}\n          title={this.props.children[1]}\n        >\n          {React.cloneElement(this.props.children[2], { toggle: this.toggleModal })}\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst Modal = ({ children, closeModal, modalState, title }) => {\n  if (!modalState) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" onClick={closeModal} />\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">{title}</p>\n          <button className=\"delete\" onClick={closeModal} />\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"content\">\n            {children}\n          </div>\n        </section>\n        <footer className=\"modal-card-foot\">\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  modalState: PropTypes.bool.isRequired,\n  title: PropTypes.string\n}\n\nexport default ModalWrapper;","import { UPSERT_MATRIX, RENAME_MATRIX, DELETE_MATRIX } from \"actions/actions\";\n\n\nexport function upsertMatrix(name, shape, numericValues) {\n    return {\n        type: UPSERT_MATRIX,\n        name,\n        shape,\n        numericValues\n    }\n}\n\nexport function renameMatrix(name, newName) {\n    return {\n        type: RENAME_MATRIX,\n        name,\n        newName\n    }\n}\n\nexport function deleteMatrix(name) {\n    return {\n        type: DELETE_MATRIX,\n        name\n    }\n}\n","import React from 'react';\nimport { bindActionCreators } from 'redux'\nimport { connect } from \"react-redux\"\n\nimport { upsertMatrix } from \"actions/matrices\"\nimport { renameMatrix } from \"actions/matrices\"\n\nclass InputGrid extends React.Component {\n    constructor(props) {\n        super(props)\n        if (props.create) {\n            this.state = {\n                numRows: props.initialRows,\n                numCols: props.initialCols,\n                matrixName: ''\n            }\n            this.finishedPopulating = true\n        }\n\n        else if (props.edit) {\n            console.log(props.ndarray)\n            this.state = {\n                numRows: props.ndarray.rows(),\n                numCols: props.ndarray.cols(),\n                numericValues: props.ndarray.numericValues,\n                matrixName: props.matrixName\n            }\n            this.finishedPopulating = false\n        }\n\n        else if (props.clone) {\n            var today = new Date();\n            var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n            var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            var timestamp = date + ' ' + time\n            this.state = {\n                numRows: props.ndarray.rows(),\n                numCols: props.ndarray.cols(),\n                numericValues: props.ndarray.numericValues,\n                matrixName: props.matrixName + ' __CLONED_AT__' + timestamp\n            }\n            this.finishedPopulating = false\n        }\n\n        this.addRow = this.addRow.bind(this)\n        this.addCol = this.addCol.bind(this)\n        this.removeRow = this.removeRow.bind(this)\n        this.removeCol = this.removeCol.bind(this)\n        this.submit = this.submit.bind(this)\n        this.updateMatrixName = this.updateMatrixName.bind(this)\n        this.getStartingValue = this.getStartingValue.bind(this)\n        this.setFinishedPopulating = this.setFinishedPopulating.bind(this)\n    }\n\n    addRow() {\n        this.setState((prevState) => ({\n            numRows: Math.min(prevState.numRows + 1, 7)\n        }))\n    }\n\n    addCol() {\n        this.setState((prevState) => ({\n            numCols: Math.min(prevState.numCols + 1, 7)\n        }))\n    }\n\n    removeRow() {\n        this.setState((prevState) => ({\n            numRows: Math.max(prevState.numRows - 1, 1)\n        }))\n    }\n\n    removeCol() {\n        this.setState((prevState) => ({\n            numCols: Math.max(prevState.numCols - 1, 1)\n        }))\n    }\n\n    updateMatrixName(newName) {\n        this.setState(\n            { ...this.state, matrixName: newName }\n        )\n    }\n\n    submit() {\n        let numericValues = []\n        for (let r = 0; r < this.state.numRows; r++) {\n            for (let c = 0; c < this.state.numCols; c++) {\n                numericValues.push(this[`textInput${r},${c}`].value)\n            }\n        }\n        if (this.props.edit) {\n            this.props.upsertMatrix(this.props.matrixName, [this.state.numRows, this.state.numCols], numericValues)\n            this.props.renameMatrix(this.props.matrixName, this.state.matrixName)\n        } else {\n            this.props.upsertMatrix(this.state.matrixName, [this.state.numRows, this.state.numCols], numericValues)\n        }\n        this.props.toggle()\n    }\n\n    getStartingValue(i, j) {\n        if (!this.finishedPopulating) {\n            return this.state.numericValues[i * this.state.numCols + j]\n        }\n        return 0\n    }\n\n    setFinishedPopulating(status) {\n        this.finishedPopulating = status\n    }\n\n    render() {\n        let ret = (\n            <div className=\"columns\">\n                <div className=\"column\">\n                    <input\n                        className=\"input\"\n                        type=\"text\"\n                        value={this.state.matrixName}\n                        placeholder=\"Matrix Name\"\n                        onChange={(e) => this.updateMatrixName(e.target.value)} />\n                    <p className=\"help is-danger\">Matrix name must be a valid python variable name</p>\n                    <div className=\"columns is-mobile\" style={{ paddingTop: \"25px\" }}>\n                        <div className=\"column is-narrow\">\n                            {[...Array(this.state.numRows).keys()].map(i =>\n                                <div key={i}>\n                                    {[...Array(this.state.numCols).keys()].map(j =>\n                                        <input\n                                            type=\"text\"\n                                            size=\"4\"\n                                            style={{ fontSize: \"20px\" }}\n                                            defaultValue={this.getStartingValue(i, j)}\n                                            key={`${i},${j}`}\n                                            ref={element => { this[`textInput${i},${j}`] = element }} />\n                                    )}\n                                    <br />\n                                </div>)}\n                        </div>\n                        <div className=\"column is-one-fifth has-text-left\">\n                            <button className=\"button is-small\" onClick={this.removeRow}>Remove Row</button>\n                            <br />\n                            <button className=\"button is-small\" onClick={this.addRow}>Add Row</button>\n                        </div>\n                    </div>\n\n                    <div className=\"columns\" >\n                        <div className=\"column is-narrow has-text-left\">\n                            <span className=\"button is-small\" onClick={this.removeCol}>Remove Col</span>\n                            <span className=\"button is-small\" onClick={this.addCol}>Add Col</span>\n                            <div style={{ paddingTop: \"20px\" }}>\n                                <button className=\"button\" onClick={this.submit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n        this.setFinishedPopulating(true)\n        return ret\n    }\n}\n\n\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        upsertMatrix,\n        renameMatrix\n    },\n        dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(InputGrid);\n\n","import React from 'react';\nimport ModalWrapper from 'components/common/ModalWrapper'\nimport InputGrid from 'components/common/InputGrid'\n\nclass CreateMatrix extends React.Component {\n  render() {\n    return (\n      <ModalWrapper>\n        <button className=\"button is-primary\">\n          Create New Matrix\n        </button>\n        Create New Matrix\n        <InputGrid initialRows={2} initialCols={2} create />\n        <button className=\"button is-primary\">\n          Submit\n        </button>\n      </ModalWrapper>\n    )\n  }\n}\n\nexport default CreateMatrix;","import React from 'react';\nimport { List } from 'immutable';\nimport katex from 'katex';\nimport Parser from 'html-react-parser';\n\nconst START = \"\\\\begin{pmatrix}\"\nconst END = \"\\\\end{pmatrix}\"\n\nclass Matrix extends React.Component {\n    convertStateToLatex(props) {\n        let fragments = new List()\n        var numericValues = props.ndarray.numericValues.map(float => Math.round(float * Math.pow(10, 6)) / Math.pow(10, 6))\n        var rows, cols\n        [rows, cols] = props.ndarray.shape\n        var count\n        for (count = 0; count < rows; count++) {\n            fragments = fragments\n                .push(numericValues\n                    .slice(count * cols, (count + 1) * cols)\n                    .join(' & '))\n        }\n        return START + fragments.join(' \\\\\\\\ ') + END\n    }\n\n    render() {\n        let math = katex.renderToString(this.convertStateToLatex(this.props));\n        return (\n            <div>{Parser(math)}</div>\n        )\n    }\n}\n\nexport default Matrix;","import React from 'react';\n\nclass ResponsiveIcon extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false\n        }\n        this.hoverOn = this.hoverOn.bind(this)\n        this.hoverOff = this.hoverOff.bind(this)\n    }\n\n    hoverOn() {\n        this.setState({ hover: true });\n    }\n\n    hoverOff() {\n        this.setState({ hover: false });\n    }\n\n    render() {\n        return (\n            <i className={this.state.hover ? \"fas \" + this.props.icon : \"far \" + this.props.icon}\n                style={{ cursor: \"pointer\" }}\n                onMouseEnter={this.hoverOn}\n                onMouseLeave={this.hoverOff}\n                onClick={this.props.onClick}\n                title={this.props.title}\n            ></i>\n        )\n    }\n}\n\nexport default ResponsiveIcon;\n\n","import React from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\nimport { deleteMatrix } from \"actions/matrices\"\nimport Matrix from \"components/common/Matrix\"\nimport ModalWrapper from \"components/common/ModalWrapper\"\nimport InputGrid from \"components/common/InputGrid\"\nimport ResponsiveIcon from \"components/common/ResponsiveIcon\"\n\nclass RichMatrix extends React.Component {\n    render() {\n        return (\n            <div className=\"box has-text-centered\">\n                <Matrix ndarray={this.props.ndarray} />\n                {this.props.matrixName}\n                <br />\n                <span className=\"icon has-text-info\" >\n                    <ModalWrapper>\n                        <ResponsiveIcon icon=\"fa-edit\" title=\"Edit the matrix in place\" />\n                        {`edit ${this.props.matrixName}`}\n                        <InputGrid ndarray={this.props.ndarray} matrixName={this.props.matrixName} edit />\n                    </ModalWrapper>\n                </span>\n                <span className=\"icon has-text-info\" >\n                    <ModalWrapper>\n                        <ResponsiveIcon icon=\"fa-clone\" title=\"Create a duplicate of this matrix\" />\n                        {`clone ${this.props.matrixName}`}\n                        <InputGrid ndarray={this.props.ndarray} matrixName={this.props.matrixName} clone />\n                    </ModalWrapper>\n                </span>\n                <span className=\"icon has-text-info\" >\n                    <ResponsiveIcon icon=\"fa-trash-alt\" onClick={() => this.props.deleteMatrix(this.props.matrixName)} title=\"Delete this matrix\" />\n                </span>\n            </div>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        deleteMatrix\n    },\n        dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(RichMatrix);\n","import React, { Component } from 'react';\n\nclass BankWrapper extends Component {\n\n    render() {\n        return (\n            <div>\n                <nav className=\"level\">\n                    <div className=\"level-left\">\n                        <div className=\"level-item\">\n                            <h2 className=\"subtitle is-3\">{this.props.title} </h2>\n                        </div>\n                        <div className=\"level-item\">\n                            {this.props.createNew}\n                        </div>\n                    </div>\n                </nav>\n                <div className=\"box\">\n                    <div className=\"columns is-multiline\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BankWrapper\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\n\nimport CreateMatrix from \"components/createMatrix/CreateMatrix\"\nimport RichMatrix from 'components/banks/matricesBank/RichMatrix';\nimport BankWrapper from \"components/banks/BankWrapper\"\n\n\nclass MatrixBank extends Component {\n  render() {\n    return (\n      <BankWrapper title=\"Matrices\" createNew={<CreateMatrix />}>\n        {this.props.matrixMap.entrySeq().map(([k, v]) =>\n          <div className=\"column is-narrow is-mobile\" key={k}>\n            <RichMatrix\n              ndarray={v}\n              matrixName={k}\n              key={k}\n            />\n          </div>\n        )}\n      </BankWrapper>\n    );\n  }\n}\n\nfunction mapMatricesToProps(state) {\n  return {\n    matrixMap: state.matrices\n  }\n}\n\nexport default connect(mapMatricesToProps)(MatrixBank);\n","import React from 'react';\nimport Matrix from \"components/common/Matrix\"\n\nclass CompositeMatrix extends React.Component {\n    render() {\n        return (\n            <div className=\"box has-text-centered\">\n                <div className=\"columns is-multiline\">\n                    {this.props.composite.nameMatrixPairs.map(([name, ndarray]) =>\n                        <div className=\"column\" key={name}>\n                            <div className=\"box\">\n                                <Matrix ndarray={ndarray} />\n                                <div>{name}</div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                <b>{this.props.matrixName}</b>\n            </div>\n        )\n    }\n}\n\nexport default CompositeMatrix\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\n\nimport BankWrapper from \"components/banks/BankWrapper\"\nimport CompositeMatrix from \"components/banks/compositeBank/CompositeMatrix\"\n\n\nclass CompositeBank extends Component {\n\n    render() {\n        return (\n            <BankWrapper title=\"Composite Matrices\">\n                {\n                    this.props.compositeMap.entrySeq().map(([k, v]) =>\n                        <div className=\"column is-narrow\" key={k}>\n                            <CompositeMatrix composite={v} matrixName={k} />\n                        </div>\n                    )\n                }\n            </BankWrapper >\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        compositeMap: state.composites\n    }\n}\n\nexport default connect(mapStateToProps)(CompositeBank);\n","import React from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\n\nimport { operationBegin } from \"actions/operation\"\nimport { Button } from \"react-bulma-components/full\"\n\nconst placeholder = \"--Select Matrix--\"\nclass GenericOperation extends React.Component {\n    constructor(props) {\n        super(props)\n        this.operate = this.operate.bind(this)\n        this.showWarning = this.showWarning.bind(this)\n        this.closeWarning = this.closeWarning.bind(this)\n        this.state = { matrix_1: \"\", matrix_2: \"\", resultVariable: \"\", displayWarning: false }\n    }\n    operate = () => {\n        console.log(this.props)\n        let argv = [...Array(this.props.numDropdowns).keys()].map(i => this[`dropdown${i}`].value)\n        this.props.operationBegin(\n            this.props.codeCreator(argv),\n            argv,\n            this.props.dataTypes,\n            this[\"resultName\"].value,\n            this.props.misc\n        )\n        this.showWarning()\n    }\n\n    showWarning = () => {\n        this.setState({ displayWarning: true })\n    }\n\n    closeWarning = () => {\n        this.setState({ displayWarning: false })\n    }\n\n    render() {\n        return (\n            <div className=\"box\">\n                <div className=\"level\">\n                    <div className=\"level-left\">\n                        {[...Array(this.props.numDropdowns).keys()].map(i =>\n                            <div className=\"level-item\" key={i}>\n                                <div className=\"select\">\n                                    <select defaultValue=\"\" ref={element => { this[`dropdown${i}`] = element }}>\n                                        <option value=\"\" disabled>{placeholder}</option>\n                                        {this.props.matrixMap.keySeq().map(k =>\n                                            <option value={k} key={k}>{k}</option>\n                                        )}\n                                    </select>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"level-right\">\n                        <div className=\"level-item\">\n                            <input\n                                className=\"input\"\n                                type=\"text\"\n                                placeholder=\"Store Result As\"\n                                ref={element => { this[\"resultName\"] = element }}\n                            />\n                        </div>\n                    </div>\n\n                </div>\n                <br />\n                <div className=\"level\">\n                    <div className=\"level-left\">\n                        {this.state.displayWarning && this.props.mostRecentError && <div className=\"notification is-warning\">\n                            <button className=\"delete\" onClick={this.closeWarning}></button>\n                            <p><b>Numpy Error: </b>{this.props.mostRecentError}</p>\n                        </div>}\n                    </div>\n                    <div className=\"level-right\">\n                        <div className=\"level-item\">\n                            <Button onClick={this.operate}>Operate</Button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        matrixMap: state.matrices,\n        mostRecentError: state.error\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        operationBegin\n    },\n        dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenericOperation);","export function invert(argv) {\n    return `np.linalg.inv(${argv[0]})`\n}\nexport const invertTypes = [\"NDARRAY\"]\n\nexport function transpose(argv) {\n    return `np.transpose(${argv[0]})`\n}\nexport const transposeTypes = [\"NDARRAY\"]\n\nexport function add(argv) {\n    return `np.add(${argv[0]}, ${argv[1]})`\n}\nexport const addTypes = [\"NDARRAY\", \"NDARRAY\"]\n\nexport function subtract(argv) {\n    return `np.subtract(${argv[0]}, ${argv[1]})`\n}\nexport const subtractTypes = [\"NDARRAY\", \"NDARRAY\"]\n\nexport function multiply(argv) {\n    return `np.dot(${argv[0]}, ${argv[1]})`\n}\nexport const multiplyTypes = [\"NDARRAY\", \"NDARRAY\"]\n\nexport function svd(argv) {\n    return `np.linalg.svd(${argv[0]}, full_matrices=False)`\n}\nexport const svdTypes = [\"NDARRAY\"]\n\nexport function eigenvectors(argv) {\n    return `np.linalg.eig(${argv[0]})`\n}\nexport const eigenvectorsTypes = [\"NDARRAY\"]","import React, { Component } from 'react';\n\nimport { Dropdown } from \"react-bulma-components/full\"\nimport GenericOperation from \"components/controlPanel/operations/GenericOperation\"\nimport * as Creators from \"components/controlPanel/CodeCreators\"\n\nclass ControlPanel extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { selected: \"\" }\n  }\n\n  onChange = selected => {\n    this.setState({ selected });\n  };\n\n  render() {\n    return (\n      <div className=\"box\">\n        <h2 className=\"subtitle is-3\">Operations</h2>\n        <Dropdown value={this.state.selected} onChange={this.onChange} color=\"info\">\n          <Dropdown.Item value=\"\">Matrix Arithmetic</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item value=\"invert\">Invert</Dropdown.Item>\n          <Dropdown.Item value=\"transpose\">Transpose</Dropdown.Item>\n          <Dropdown.Item value=\"add\">Add</Dropdown.Item>\n          <Dropdown.Item value=\"subtract\">Subtract</Dropdown.Item>\n          <Dropdown.Item value=\"multiply\">Multiply</Dropdown.Item>\n        </Dropdown>{' '}\n        <Dropdown value={this.state.selected} onChange={this.onChange} color=\"info\">\n          <Dropdown.Item value=\"\">Matrix Decomposition</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item value=\"svd\">SVD</Dropdown.Item>\n          <Dropdown.Item value=\"eigenvectors\">Eigenvectors</Dropdown.Item>\n        </Dropdown>\n        <hr />\n        {this.state.selected === \"invert\" && <GenericOperation numDropdowns={1} codeCreator={Creators.invert} dataTypes={Creators.invertTypes} />}\n        {this.state.selected === \"transpose\" && <GenericOperation numDropdowns={1} codeCreator={Creators.transpose} dataTypes={Creators.transposeTypes} />}\n        {this.state.selected === \"add\" && <GenericOperation numDropdowns={2} codeCreator={Creators.add} dataTypes={Creators.addTypes} />}\n        {this.state.selected === \"subtract\" && <GenericOperation numDropdowns={2} codeCreator={Creators.subtract} dataTypes={Creators.subtractTypes} />}\n        {this.state.selected === \"multiply\" && <GenericOperation numDropdowns={2} codeCreator={Creators.multiply} dataTypes={Creators.multiplyTypes} />}\n        {this.state.selected === \"svd\" && <GenericOperation numDropdowns={1} codeCreator={Creators.svd} dataTypes={Creators.svdTypes} misc={{ \"namev\": [\"U\", \"Σ\", \"V\"] }} />}\n        {this.state.selected === \"eigenvectors\" && <GenericOperation numDropdowns={1} codeCreator={Creators.eigenvectors} dataTypes={Creators.eigenvectorsTypes} misc={{ \"namev\": [\"eigenvalues\", \"eigenvectors\"] }} />}\n      </div>\n    );\n  }\n}\n\nexport default ControlPanel","import React, { Component } from 'react';\n\nimport MatricesBank from \"components/banks/matricesBank/MatricesBank\"\nimport CompositeBank from \"components/banks/compositeBank/CompositeBank\"\nimport ControlPanel from \"components/controlPanel/ControlPanel\"\n\nclass MatrixGUI extends Component {\n\n  render() {\n    return (\n      <div className=\"container\">\n        <section className=\"section\">\n          <MatricesBank />\n        </section>\n        <section className=\"section\">\n          <CompositeBank />\n        </section>\n        <section className=\"section\">\n          <ControlPanel />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default MatrixGUI;\n","import React, { Component } from 'react';\n\nimport MatrixGUI from \"components/MatrixGUI\"\n// import Navbar from \"components/navbar/Navbar\"\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        {/* <Navbar /> */}\n        <MatrixGUI />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import 'bulma/css/bulma.css'\n\nimport React from 'react';\nimport { render } from 'react-dom'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from 'reducers'\n\nimport { createEpicMiddleware } from 'redux-observable';\nimport { rootEpic } from 'epics'\n\nimport { createLogger } from 'redux-logger'\nimport Immutable from 'immutable'\nimport 'rxjs';\n\nimport App from 'App';\n\nconst logger = createLogger({\n  stateTransformer: (state) => {\n    let newState = {};\n\n    for (var i of Object.keys(state)) {\n      if (Immutable.Iterable.isIterable(state[i])) {\n        newState[i] = state[i].toJS();\n      } else {\n        newState[i] = state[i];\n      }\n    };\n\n    return newState;\n  }\n});\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(epicMiddleware, logger)\n)\n\nepicMiddleware.run(rootEpic);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}